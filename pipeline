pipeline {
    agent any

    environment {
        IMAGE_NAME = "kanban-board"
        CONTAINER_NAME = "kanban-container"
        PORT = "84"
        ECR_REPO = "864899838867.dkr.ecr.ap-south-1.amazonaws.com/kanban"
        AWS_REGION = "ap-south-1"

    }

    stages {
        // -----------------------------
        // 1. SOURCE CODE MANAGEMENT
        // -----------------------------
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/MDinesh28/kanban-board.git'
            }
        }

        // -----------------------------
        // 2. QUALITY ANALYSIS
        // -----------------------------
        stage('SonarQube Code Scan') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'sonar-scanner'
                }
            }
        }

        // -----------------------------
        // 3. BUILD
        // -----------------------------
        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $IMAGE_NAME .'
            }
        }

        // -----------------------------
        // 4. SECURITY SCAN (Trivy)
        // -----------------------------
        stage('Scan Docker Image with Trivy') {
    steps {
        script {
            // Run Trivy scan and store output
            def scanStatus = sh(script: '''
                trivy image --severity LOW,MEDIUM,CRITICAL --format table --output trivy-report.txt $IMAGE_NAME || true
                grep -q 'CRITICAL' trivy-report.txt && echo "CRITICAL_FOUND" || echo "NO_CRITICAL"
            ''', returnStdout: true).trim()

            // Show scan report in console
            sh 'cat trivy-report.txt'

            // Archive report
            archiveArtifacts artifacts: 'trivy-report.txt', fingerprint: true

            // If CRITICAL vulnerabilities are found, require manual approval
            if (scanStatus == 'CRITICAL_FOUND') {
                echo "CRITICAL vulnerabilities found! Manual approval required to proceed."

                input message: 'CRITICAL vulnerabilities found. Do you want to continue?', ok: 'Approve and Proceed'
            } else {
                echo "No CRITICAL vulnerabilities found. Proceeding..."
            }
        }
    }
}

// -----------------------------
// 5. PUSH TO ECR
// -----------------------------
stage('Push to ECR') {
    steps {
        script {
            // Authenticate Docker to ECR
            sh 'aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO'

            // Tag the image for ECR
            sh 'docker tag $IMAGE_NAME:latest $ECR_REPO:latest'

            // Push the image
            sh 'docker push $ECR_REPO:latest'
        }
    }
}

        // -----------------------------
        // 6. DEPLOY
        // -----------------------------
        stage('Run Docker Container') {
            steps {
                sh '''
                    docker stop $CONTAINER_NAME || true
                    docker rm $CONTAINER_NAME || true
                    docker run -d -p $PORT:80 --name $CONTAINER_NAME $IMAGE_NAME
                '''
            }
        }
    }
}
